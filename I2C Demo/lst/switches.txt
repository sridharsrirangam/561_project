; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\switches.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\switches.d --cpu=Cortex-M0 --apcs=interwork -O0 -Iinc -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Freescale\Kinetis -D__MICROLIB --omf_browse=.\obj\switches.crf src\switches.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Init_5way_Switch PROC
;;;4      
;;;5      void Init_5way_Switch(void) {
000000  4818              LDR      r0,|L1.100|
;;;6      	
;;;7      #if USE_DISCRETE_DIGITAL_INPUTS
;;;8        SIM->SCGC5 |=  SIM_SCGC5_PORTE_MASK; /* enable clock for port E */
;;;9      	
;;;10       /* Select GPIO and enable pull-up resistors for pins connected to switches */
;;;11       PORTE->PCR[SW_UP_POS] |= PORT_PCR_MUX(1) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK;	
;;;12       PORTE->PCR[SW_DN_POS] |= PORT_PCR_MUX(1) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK;	
;;;13       PORTE->PCR[SW_LT_POS] |= PORT_PCR_MUX(1) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK;	
;;;14       PORTE->PCR[SW_RT_POS] |= PORT_PCR_MUX(1) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK;	
;;;15       PORTE->PCR[SW_CR_POS] |= PORT_PCR_MUX(1) | PORT_PCR_PS_MASK | PORT_PCR_PE_MASK;	
;;;16     	
;;;17       /* Set port E bits 0-3, 7 to inputs */
;;;18       PTE->PDDR &= ~( MASK(SW_UP_POS) | 
;;;19     				  MASK(SW_DN_POS) |
;;;20     				  MASK(SW_LT_POS) | 
;;;21     				  MASK(SW_RT_POS) |
;;;22     				  MASK(SW_CR_POS) );
;;;23     #else
;;;24     	/* Enable clock for ADC */
;;;25     	SIM->SCGC6 |= (1UL << SIM_SCGC6_ADC0_SHIFT); 
000002  6bc0              LDR      r0,[r0,#0x3c]
000004  2101              MOVS     r1,#1
000006  06c9              LSLS     r1,r1,#27
000008  4308              ORRS     r0,r0,r1
00000a  4916              LDR      r1,|L1.100|
00000c  63c8              STR      r0,[r1,#0x3c]
;;;26     	ADC0->CFG1 = 0x9C; // 16 bit conversion
00000e  209c              MOVS     r0,#0x9c
000010  4915              LDR      r1,|L1.104|
000012  6088              STR      r0,[r1,#8]
;;;27     	ADC0->SC2 = 0; // single ended mode
000014  2000              MOVS     r0,#0
000016  6208              STR      r0,[r1,#0x20]
;;;28     	#endif
;;;29     }
000018  4770              BX       lr
;;;30     
                          ENDP

                  ReadSwitchesViaAnalog PROC
;;;50     
;;;51     unsigned ReadSwitchesViaAnalog(void) {
00001a  2200              MOVS     r2,#0
;;;52     	unsigned res=0, i;
;;;53     	
;;;54     	// Read ADC
;;;55     	ADC0->SC1[0] = SW_ADC_CHANNEL; //start conversion
00001c  2008              MOVS     r0,#8
00001e  4b12              LDR      r3,|L1.104|
000020  6018              STR      r0,[r3,#0]
;;;56     	
;;;57     	// block until conversion is done
;;;58     	while (!(ADC0->SC1[0] & ADC_SC1_COCO_MASK))
000022  bf00              NOP      
                  |L1.36|
000024  4810              LDR      r0,|L1.104|
000026  6800              LDR      r0,[r0,#0]
000028  2380              MOVS     r3,#0x80
00002a  4218              TST      r0,r3
00002c  d0fa              BEQ      |L1.36|
;;;59     		;
;;;60     	
;;;61     	res = ADC0->R[0];
00002e  480e              LDR      r0,|L1.104|
000030  6902              LDR      r2,[r0,#0x10]
;;;62     	// Look it up in the conversion table
;;;63     	for (i=0; i<NUM_SWITCHES; i++) {
000032  2100              MOVS     r1,#0
000034  e011              B        |L1.90|
                  |L1.54|
;;;64     		if ((switch_converter[i].High >= res) && (res >= switch_converter[i].Low))
000036  200c              MOVS     r0,#0xc
000038  4348              MULS     r0,r1,r0
00003a  4b0c              LDR      r3,|L1.108|
00003c  18c0              ADDS     r0,r0,r3
00003e  6840              LDR      r0,[r0,#4]
000040  4290              CMP      r0,r2
000042  d309              BCC      |L1.88|
000044  200c              MOVS     r0,#0xc
000046  4348              MULS     r0,r1,r0
000048  18c0              ADDS     r0,r0,r3
00004a  6880              LDR      r0,[r0,#8]
00004c  4290              CMP      r0,r2
00004e  d803              BHI      |L1.88|
;;;65     			return switch_converter[i].Result;
000050  200c              MOVS     r0,#0xc
000052  4348              MULS     r0,r1,r0
000054  5818              LDR      r0,[r3,r0]
                  |L1.86|
;;;66     	}
;;;67     	return 0xffffffff;
;;;68     }
000056  4770              BX       lr
                  |L1.88|
000058  1c49              ADDS     r1,r1,#1              ;63
                  |L1.90|
00005a  2905              CMP      r1,#5                 ;63
00005c  d3eb              BCC      |L1.54|
00005e  2000              MOVS     r0,#0                 ;67
000060  43c0              MVNS     r0,r0                 ;67
000062  e7f8              B        |L1.86|
;;;69     #endif
                          ENDP

                  |L1.100|
                          DCD      0x40048000
                  |L1.104|
                          DCD      0x4003b000
                  |L1.108|
                          DCD      switch_converter

                          AREA ||.data||, DATA, ALIGN=2

                  switch_converter
                          DCD      0xdfffffff
                          DCD      0x00009a82
                          DCD      0x00002dc8
                          DCD      0xff7fffff
                          DCD      0x00002dc7
                          DCD      0x0000211f
                          DCD      0xffdfffff
                          DCD      0x0000211e
                          DCD      0x0000120e
                          DCD      0xbfffffff
                          DCD      0x0000120d
                          DCD      0x000003c3
                          DCD      0xffbfffff
                          DCD      0x000003c2
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "src\\switches.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_switches_c_2d00e275____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_switches_c_2d00e275____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_switches_c_2d00e275____REVSH|
#line 130
|__asm___10_switches_c_2d00e275____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
