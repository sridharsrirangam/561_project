; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\timers.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\timers.d --cpu=Cortex-M0 --apcs=interwork -O0 -Iinc -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Freescale\Kinetis -D__MICROLIB --omf_browse=.\obj\timers.crf src\timers.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  Init_PIT PROC
;;;6      
;;;7      void Init_PIT(unsigned period) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;8      	// Enable clock to PIT module
;;;9      	SIM->SCGC6 |= SIM_SCGC6_PIT_MASK;
000004  4876              LDR      r0,|L1.480|
000006  6bc0              LDR      r0,[r0,#0x3c]
000008  2101              MOVS     r1,#1
00000a  05c9              LSLS     r1,r1,#23
00000c  4308              ORRS     r0,r0,r1
00000e  4974              LDR      r1,|L1.480|
000010  63c8              STR      r0,[r1,#0x3c]
;;;10     	
;;;11     	// Enable module, freeze timers in debug mode
;;;12     	PIT->MCR &= ~PIT_MCR_MDIS_MASK;
000012  4874              LDR      r0,|L1.484|
000014  6800              LDR      r0,[r0,#0]
000016  2102              MOVS     r1,#2
000018  4388              BICS     r0,r0,r1
00001a  4972              LDR      r1,|L1.484|
00001c  6008              STR      r0,[r1,#0]
;;;13     	PIT->MCR |= PIT_MCR_FRZ_MASK;
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]
000022  2101              MOVS     r1,#1
000024  4308              ORRS     r0,r0,r1
000026  496f              LDR      r1,|L1.484|
000028  6008              STR      r0,[r1,#0]
;;;14     	
;;;15     	// Initialize PIT0 to count down from argument 
;;;16     	PIT->CHANNEL[0].LDVAL = PIT_LDVAL_TSV(period);
00002a  486f              LDR      r0,|L1.488|
00002c  6004              STR      r4,[r0,#0]
;;;17     
;;;18     	// No chaining
;;;19     	PIT->CHANNEL[0].TCTRL &= PIT_TCTRL_CHN_MASK;
00002e  6880              LDR      r0,[r0,#8]
000030  2104              MOVS     r1,#4
000032  4008              ANDS     r0,r0,r1
000034  496c              LDR      r1,|L1.488|
000036  6088              STR      r0,[r1,#8]
;;;20     	
;;;21     	// Generate interrupts
;;;22     	PIT->CHANNEL[0].TCTRL |= PIT_TCTRL_TIE_MASK;
000038  4608              MOV      r0,r1
00003a  6880              LDR      r0,[r0,#8]
00003c  2102              MOVS     r1,#2
00003e  4308              ORRS     r0,r0,r1
000040  4969              LDR      r1,|L1.488|
000042  6088              STR      r0,[r1,#8]
;;;23     
;;;24     	/* Enable Interrupts */
;;;25     	NVIC_SetPriority(PIT_IRQn, 128); // 0, 64, 128 or 192
000044  2180              MOVS     r1,#0x80
000046  2016              MOVS     r0,#0x16
000048  f7fffffe          BL       NVIC_SetPriority
;;;26     	NVIC_ClearPendingIRQ(PIT_IRQn); 
00004c  2016              MOVS     r0,#0x16
00004e  f7fffffe          BL       NVIC_ClearPendingIRQ
;;;27     	NVIC_EnableIRQ(PIT_IRQn);	
000052  2016              MOVS     r0,#0x16
000054  2101              MOVS     r1,#1
000056  4081              LSLS     r1,r1,r0
000058  4a64              LDR      r2,|L1.492|
00005a  6011              STR      r1,[r2,#0]
00005c  bf00              NOP      
;;;28     }
00005e  bd10              POP      {r4,pc}
;;;29     
                          ENDP

                  Start_PIT PROC
;;;30     
;;;31     void Start_PIT(void) {
000060  4861              LDR      r0,|L1.488|
;;;32     // Enable counter
;;;33     	PIT->CHANNEL[0].TCTRL |= PIT_TCTRL_TEN_MASK;
000062  6880              LDR      r0,[r0,#8]
000064  2101              MOVS     r1,#1
000066  4308              ORRS     r0,r0,r1
000068  495f              LDR      r1,|L1.488|
00006a  6088              STR      r0,[r1,#8]
;;;34     }
00006c  4770              BX       lr
;;;35     
                          ENDP

                  Stop_PIT PROC
;;;36     void Stop_PIT(void) {
00006e  485e              LDR      r0,|L1.488|
;;;37     // Enable counter
;;;38     	PIT->CHANNEL[0].TCTRL &= ~PIT_TCTRL_TEN_MASK;
000070  6880              LDR      r0,[r0,#8]
000072  0841              LSRS     r1,r0,#1
000074  0049              LSLS     r1,r1,#1
000076  485c              LDR      r0,|L1.488|
000078  6081              STR      r1,[r0,#8]
;;;39     }
00007a  4770              BX       lr
;;;40     
                          ENDP

                  PIT_IRQHandler PROC
;;;41     
;;;42     void PIT_IRQHandler() {
00007c  b510              PUSH     {r4,lr}
;;;43     	static unsigned LCD_update_delay = LCD_UPDATE_PERIOD;
;;;44     	//clear pending IRQ
;;;45     	NVIC_ClearPendingIRQ(PIT_IRQn);
00007e  2016              MOVS     r0,#0x16
000080  f7fffffe          BL       NVIC_ClearPendingIRQ
;;;46     	
;;;47     	// check to see which channel triggered interrupt 
;;;48     	if (PIT->CHANNEL[0].TFLG & PIT_TFLG_TIF_MASK) {
000084  4858              LDR      r0,|L1.488|
000086  68c0              LDR      r0,[r0,#0xc]
000088  07c0              LSLS     r0,r0,#31
00008a  0fc0              LSRS     r0,r0,#31
00008c  d01a              BEQ      |L1.196|
;;;49     		// clear status flag for timer channel 0
;;;50     		PIT->CHANNEL[0].TFLG &= PIT_TFLG_TIF_MASK;
00008e  4856              LDR      r0,|L1.488|
000090  68c0              LDR      r0,[r0,#0xc]
000092  07c1              LSLS     r1,r0,#31
000094  0fc9              LSRS     r1,r1,#31
000096  4854              LDR      r0,|L1.488|
000098  60c1              STR      r1,[r0,#0xc]
;;;51     		
;;;52     		// Do ISR work
;;;53     		PIT_interrupt_counter++;
00009a  4855              LDR      r0,|L1.496|
00009c  6800              LDR      r0,[r0,#0]  ; PIT_interrupt_counter
00009e  1c40              ADDS     r0,r0,#1
0000a0  4953              LDR      r1,|L1.496|
0000a2  6008              STR      r0,[r1,#0]  ; PIT_interrupt_counter
;;;54     		LCD_update_delay--;
0000a4  4853              LDR      r0,|L1.500|
0000a6  6800              LDR      r0,[r0,#0]  ; LCD_update_delay
0000a8  1e40              SUBS     r0,r0,#1
0000aa  4952              LDR      r1,|L1.500|
0000ac  6008              STR      r0,[r1,#0]  ; LCD_update_delay
;;;55     		if (LCD_update_delay == 0) {
0000ae  4608              MOV      r0,r1
0000b0  6800              LDR      r0,[r0,#0]  ; LCD_update_delay
0000b2  2800              CMP      r0,#0
0000b4  d111              BNE      |L1.218|
;;;56     			LCD_update_requested = 1;
0000b6  2001              MOVS     r0,#1
0000b8  494f              LDR      r1,|L1.504|
0000ba  6008              STR      r0,[r1,#0]  ; LCD_update_requested
;;;57     			LCD_update_delay = LCD_UPDATE_PERIOD;
0000bc  2064              MOVS     r0,#0x64
0000be  494d              LDR      r1,|L1.500|
0000c0  6008              STR      r0,[r1,#0]  ; LCD_update_delay
0000c2  e00a              B        |L1.218|
                  |L1.196|
;;;58     		}
;;;59     	} else if (PIT->CHANNEL[1].TFLG & PIT_TFLG_TIF_MASK) {
0000c4  4848              LDR      r0,|L1.488|
0000c6  69c0              LDR      r0,[r0,#0x1c]
0000c8  07c0              LSLS     r0,r0,#31
0000ca  0fc0              LSRS     r0,r0,#31
0000cc  d005              BEQ      |L1.218|
;;;60     		// clear status flag for timer channel 1
;;;61     		PIT->CHANNEL[1].TFLG &= PIT_TFLG_TIF_MASK;
0000ce  4846              LDR      r0,|L1.488|
0000d0  69c0              LDR      r0,[r0,#0x1c]
0000d2  07c1              LSLS     r1,r0,#31
0000d4  0fc9              LSRS     r1,r1,#31
0000d6  4844              LDR      r0,|L1.488|
0000d8  61c1              STR      r1,[r0,#0x1c]
                  |L1.218|
;;;62     	} 
;;;63     }
0000da  bd10              POP      {r4,pc}
;;;64     
                          ENDP

                  Init_PWM PROC
;;;65     void Init_PWM()
0000dc  4840              LDR      r0,|L1.480|
;;;66     {
;;;67     	//turn on clock to TPM 
;;;68     	SIM->SCGC6 |= SIM_SCGC6_TPM0_MASK;
0000de  6bc0              LDR      r0,[r0,#0x3c]
0000e0  2101              MOVS     r1,#1
0000e2  0609              LSLS     r1,r1,#24
0000e4  4308              ORRS     r0,r0,r1
0000e6  493e              LDR      r1,|L1.480|
0000e8  63c8              STR      r0,[r1,#0x3c]
;;;69     	
;;;70     	//set multiplexer to connect TPM0 Ch 2 to PTA5
;;;71     	PORTA->PCR[5] |= PORT_PCR_MUX(3); 
0000ea  4844              LDR      r0,|L1.508|
0000ec  6940              LDR      r0,[r0,#0x14]
0000ee  2103              MOVS     r1,#3
0000f0  0209              LSLS     r1,r1,#8
0000f2  4308              ORRS     r0,r0,r1
0000f4  4941              LDR      r1,|L1.508|
0000f6  6148              STR      r0,[r1,#0x14]
;;;72     
;;;73     	// TPM0 Ch 4 to PTC8
;;;74     	PORTC->PCR[8] |= PORT_PCR_MUX(3);
0000f8  4841              LDR      r0,|L1.512|
0000fa  6a00              LDR      r0,[r0,#0x20]
0000fc  2103              MOVS     r1,#3
0000fe  0209              LSLS     r1,r1,#8
000100  4308              ORRS     r0,r0,r1
000102  493f              LDR      r1,|L1.512|
000104  6208              STR      r0,[r1,#0x20]
;;;75     	
;;;76     	//set clock source for tpm
;;;77     	SIM->SOPT2 |= (SIM_SOPT2_TPMSRC(1) | SIM_SOPT2_PLLFLLSEL_MASK);
000106  4836              LDR      r0,|L1.480|
000108  6840              LDR      r0,[r0,#4]
00010a  493e              LDR      r1,|L1.516|
00010c  4308              ORRS     r0,r0,r1
00010e  4934              LDR      r1,|L1.480|
000110  6048              STR      r0,[r1,#4]
;;;78     
;;;79     	//load the counter and mod
;;;80     	TPM0->MOD = 60124;
000112  483d              LDR      r0,|L1.520|
000114  493d              LDR      r1,|L1.524|
000116  6088              STR      r0,[r1,#8]
;;;81     		
;;;82     	//set channels to center-aligned high-true PWM
;;;83     	//	TPM0->CONTROLS[1].CnSC = TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK;
;;;84     	TPM0->CONTROLS[2].CnSC = TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK;
000118  2128              MOVS     r1,#0x28
00011a  483c              LDR      r0,|L1.524|
00011c  61c1              STR      r1,[r0,#0x1c]
;;;85     	TPM0->CONTROLS[4].CnSC = TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK;
00011e  62c1              STR      r1,[r0,#0x2c]
;;;86     
;;;87     	//set TPM to up-down and divide by 8 prescaler and clock mode
;;;88     	TPM0->SC = (TPM_SC_CPWMS_MASK | TPM_SC_CMOD(1) | TPM_SC_PS(3));
000120  202b              MOVS     r0,#0x2b
000122  493a              LDR      r1,|L1.524|
000124  6008              STR      r0,[r1,#0]
;;;89     	
;;;90     	//set trigger mode
;;;91     	TPM0->CONF |= TPM_CONF_TRGSEL(0xA);
000126  4839              LDR      r0,|L1.524|
000128  3080              ADDS     r0,r0,#0x80
00012a  6840              LDR      r0,[r0,#4]
00012c  2105              MOVS     r1,#5
00012e  0649              LSLS     r1,r1,#25
000130  4308              ORRS     r0,r0,r1
000132  4936              LDR      r1,|L1.524|
000134  3180              ADDS     r1,r1,#0x80
000136  6048              STR      r0,[r1,#4]
;;;92     	
;;;93     	TPM0->CONTROLS[2].CnV = 0x3000;
000138  2103              MOVS     r1,#3
00013a  0309              LSLS     r1,r1,#12
00013c  4833              LDR      r0,|L1.524|
00013e  6201              STR      r1,[r0,#0x20]
;;;94     	TPM0->CONTROLS[4].CnV = 0x2000;
000140  2101              MOVS     r1,#1
000142  0349              LSLS     r1,r1,#13
000144  6301              STR      r1,[r0,#0x30]
;;;95     	
;;;96     }
000146  4770              BX       lr
;;;97     
                          ENDP

                  Set_PWM_Values PROC
;;;98     void Set_PWM_Values(uint16_t perc1, uint16_t perc2) {
000148  b530              PUSH     {r4,r5,lr}
;;;99     	uint16_t n1, n2;
;;;100    	
;;;101    	n1 = perc1*55 + 1500;
00014a  2437              MOVS     r4,#0x37
00014c  4344              MULS     r4,r0,r4
00014e  4d30              LDR      r5,|L1.528|
000150  1964              ADDS     r4,r4,r5
000152  b2a2              UXTH     r2,r4
;;;102    	n2 = perc2*55 + 1500;
000154  2437              MOVS     r4,#0x37
000156  434c              MULS     r4,r1,r4
000158  1964              ADDS     r4,r4,r5
00015a  b2a3              UXTH     r3,r4
;;;103    	
;;;104    	TPM0->CONTROLS[2].CnV = n1;
00015c  4c2b              LDR      r4,|L1.524|
00015e  6222              STR      r2,[r4,#0x20]
;;;105    	TPM0->CONTROLS[4].CnV = n2;
000160  6323              STR      r3,[r4,#0x30]
;;;106    	
;;;107    }
000162  bd30              POP      {r4,r5,pc}
                          ENDP

                  NVIC_ClearPendingIRQ PROC
;;;662     */
;;;663    __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000164  06c2              LSLS     r2,r0,#27
;;;664    {
;;;665      NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
000166  0ed2              LSRS     r2,r2,#27
000168  2101              MOVS     r1,#1
00016a  4091              LSLS     r1,r1,r2
00016c  4a29              LDR      r2,|L1.532|
00016e  6011              STR      r1,[r2,#0]
;;;666    }
000170  4770              BX       lr
;;;667    
                          ENDP

                  NVIC_SetPriority PROC
;;;677     */
;;;678    __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000172  b510              PUSH     {r4,lr}
;;;679    {
;;;680      if(IRQn < 0) {
000174  2800              CMP      r0,#0
000176  da19              BGE      |L1.428|
;;;681        SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
000178  4a27              LDR      r2,|L1.536|
00017a  0703              LSLS     r3,r0,#28
00017c  0f1b              LSRS     r3,r3,#28
00017e  3b08              SUBS     r3,r3,#8
000180  089b              LSRS     r3,r3,#2
000182  009b              LSLS     r3,r3,#2
000184  58d2              LDR      r2,[r2,r3]
000186  0783              LSLS     r3,r0,#30
000188  0edc              LSRS     r4,r3,#27
00018a  23ff              MOVS     r3,#0xff
00018c  40a3              LSLS     r3,r3,r4
00018e  439a              BICS     r2,r2,r3
000190  078b              LSLS     r3,r1,#30
000192  0e1b              LSRS     r3,r3,#24
000194  0784              LSLS     r4,r0,#30
000196  0ee4              LSRS     r4,r4,#27
000198  40a3              LSLS     r3,r3,r4
00019a  431a              ORRS     r2,r2,r3
00019c  4b1e              LDR      r3,|L1.536|
00019e  0704              LSLS     r4,r0,#28
0001a0  0f24              LSRS     r4,r4,#28
0001a2  3c08              SUBS     r4,r4,#8
0001a4  08a4              LSRS     r4,r4,#2
0001a6  00a4              LSLS     r4,r4,#2
0001a8  511a              STR      r2,[r3,r4]
0001aa  e018              B        |L1.478|
                  |L1.428|
;;;682            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;683      else {
;;;684        NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
0001ac  4a0f              LDR      r2,|L1.492|
0001ae  2303              MOVS     r3,#3
0001b0  021b              LSLS     r3,r3,#8
0001b2  18d2              ADDS     r2,r2,r3
0001b4  0883              LSRS     r3,r0,#2
0001b6  009b              LSLS     r3,r3,#2
0001b8  58d2              LDR      r2,[r2,r3]
0001ba  0783              LSLS     r3,r0,#30
0001bc  0edc              LSRS     r4,r3,#27
0001be  23ff              MOVS     r3,#0xff
0001c0  40a3              LSLS     r3,r3,r4
0001c2  439a              BICS     r2,r2,r3
0001c4  078b              LSLS     r3,r1,#30
0001c6  0e1b              LSRS     r3,r3,#24
0001c8  0784              LSLS     r4,r0,#30
0001ca  0ee4              LSRS     r4,r4,#27
0001cc  40a3              LSLS     r3,r3,r4
0001ce  431a              ORRS     r2,r2,r3
0001d0  4b06              LDR      r3,|L1.492|
0001d2  2403              MOVS     r4,#3
0001d4  0224              LSLS     r4,r4,#8
0001d6  191b              ADDS     r3,r3,r4
0001d8  0884              LSRS     r4,r0,#2
0001da  00a4              LSLS     r4,r4,#2
0001dc  511a              STR      r2,[r3,r4]
                  |L1.478|
;;;685            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;686    }
0001de  bd10              POP      {r4,pc}
;;;687    
                          ENDP

                  |L1.480|
                          DCD      0x40048000
                  |L1.484|
                          DCD      0x40037000
                  |L1.488|
                          DCD      0x40037100
                  |L1.492|
                          DCD      0xe000e100
                  |L1.496|
                          DCD      PIT_interrupt_counter
                  |L1.500|
                          DCD      LCD_update_delay
                  |L1.504|
                          DCD      LCD_update_requested
                  |L1.508|
                          DCD      0x40049000
                  |L1.512|
                          DCD      0x4004b000
                  |L1.516|
                          DCD      0x01010000
                  |L1.520|
                          DCD      0x0000eadc
                  |L1.524|
                          DCD      0x40038000
                  |L1.528|
                          DCD      0x000005dc
                  |L1.532|
                          DCD      0xe000e280
                  |L1.536|
                          DCD      0xe000ed1c

                          AREA ||.data||, DATA, ALIGN=2

                  PIT_interrupt_counter
                          DCD      0x00000000
                  LCD_update_requested
                          DCD      0x00000000
                  LCD_update_delay
                          DCD      0x00000064

;*** Start embedded assembler ***

#line 1 "src\\timers.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_timers_c_7f1ae6e8____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_timers_c_7f1ae6e8____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_timers_c_7f1ae6e8____REVSH|
#line 130
|__asm___8_timers_c_7f1ae6e8____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
