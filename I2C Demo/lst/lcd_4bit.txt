; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\lcd_4bit.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\lcd_4bit.d --cpu=Cortex-M0 --apcs=interwork -O0 -Iinc -IC:\Keil\ARM\RV31\Inc -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Freescale\Kinetis -D__MICROLIB --omf_browse=.\obj\lcd_4bit.crf src\LCD_4bit.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  delay PROC
;;;36     
;;;37     static void delay (volatile int cnt)
000000  0100              LSLS     r0,r0,#4
;;;38     {
;;;39       cnt <<= DELAY_2N;
;;;40     
;;;41       while (cnt--);
000002  bf00              NOP      
                  |L1.4|
000004  4601              MOV      r1,r0
000006  1e40              SUBS     r0,r0,#1
000008  2900              CMP      r1,#0
00000a  d1fb              BNE      |L1.4|
;;;42     }
00000c  4770              BX       lr
;;;43     
                          ENDP

                  lcd_read_status PROC
;;;50     
;;;51     static unsigned char lcd_read_status (void)
00000e  b510              PUSH     {r4,lr}
;;;52     {
;;;53       unsigned char status;
;;;54     
;;;55       LCD_DATA_DIR_IN
000010  48b8              LDR      r0,|L1.756|
000012  6940              LDR      r0,[r0,#0x14]
000014  0900              LSRS     r0,r0,#4
000016  0100              LSLS     r0,r0,#4
000018  49b6              LDR      r1,|L1.756|
00001a  6148              STR      r0,[r1,#0x14]
;;;56       LCD_RS(0)
00001c  4608              MOV      r0,r1
00001e  6800              LDR      r0,[r0,#0]
000020  2120              MOVS     r1,#0x20
000022  4388              BICS     r0,r0,r1
000024  49b3              LDR      r1,|L1.756|
000026  6008              STR      r0,[r1,#0]
;;;57       LCD_RW(1)
000028  48b2              LDR      r0,|L1.756|
00002a  38c0              SUBS     r0,r0,#0xc0
00002c  6800              LDR      r0,[r0,#0]
00002e  2101              MOVS     r1,#1
000030  0349              LSLS     r1,r1,#13
000032  4388              BICS     r0,r0,r1
000034  1840              ADDS     r0,r0,r1
000036  49af              LDR      r1,|L1.756|
000038  39c0              SUBS     r1,r1,#0xc0
00003a  6008              STR      r0,[r1,#0]
;;;58       delay(10);
00003c  200a              MOVS     r0,#0xa
00003e  f7fffffe          BL       delay
;;;59       LCD_E(1)
000042  48ac              LDR      r0,|L1.756|
000044  6800              LDR      r0,[r0,#0]
000046  2110              MOVS     r1,#0x10
000048  4388              BICS     r0,r0,r1
00004a  3010              ADDS     r0,r0,#0x10
00004c  49a9              LDR      r1,|L1.756|
00004e  6008              STR      r0,[r1,#0]
;;;60       delay(10);
000050  200a              MOVS     r0,#0xa
000052  f7fffffe          BL       delay
;;;61       status  = LCD_DATA_IN << 4;
000056  48a7              LDR      r0,|L1.756|
000058  6900              LDR      r0,[r0,#0x10]
00005a  0700              LSLS     r0,r0,#28
00005c  0e04              LSRS     r4,r0,#24
;;;62       LCD_E(0)
00005e  48a5              LDR      r0,|L1.756|
000060  6800              LDR      r0,[r0,#0]
000062  2110              MOVS     r1,#0x10
000064  4388              BICS     r0,r0,r1
000066  49a3              LDR      r1,|L1.756|
000068  6008              STR      r0,[r1,#0]
;;;63       delay(10);
00006a  200a              MOVS     r0,#0xa
00006c  f7fffffe          BL       delay
;;;64       LCD_E(1)
000070  48a0              LDR      r0,|L1.756|
000072  6800              LDR      r0,[r0,#0]
000074  2110              MOVS     r1,#0x10
000076  4388              BICS     r0,r0,r1
000078  3010              ADDS     r0,r0,#0x10
00007a  499e              LDR      r1,|L1.756|
00007c  6008              STR      r0,[r1,#0]
;;;65       delay(10);
00007e  200a              MOVS     r0,#0xa
000080  f7fffffe          BL       delay
;;;66       status |= LCD_DATA_IN;
000084  489b              LDR      r0,|L1.756|
000086  6900              LDR      r0,[r0,#0x10]
000088  0700              LSLS     r0,r0,#28
00008a  0f00              LSRS     r0,r0,#28
00008c  4304              ORRS     r4,r4,r0
;;;67       LCD_E(0)
00008e  4899              LDR      r0,|L1.756|
000090  6800              LDR      r0,[r0,#0]
000092  2110              MOVS     r1,#0x10
000094  4388              BICS     r0,r0,r1
000096  4997              LDR      r1,|L1.756|
000098  6008              STR      r0,[r1,#0]
;;;68       LCD_DATA_DIR_OUT
00009a  4608              MOV      r0,r1
00009c  6940              LDR      r0,[r0,#0x14]
00009e  210f              MOVS     r1,#0xf
0000a0  4308              ORRS     r0,r0,r1
0000a2  4994              LDR      r1,|L1.756|
0000a4  6148              STR      r0,[r1,#0x14]
;;;69       return (status);
0000a6  4620              MOV      r0,r4
;;;70     }
0000a8  bd10              POP      {r4,pc}
;;;71     
                          ENDP

                  wait_while_busy PROC
;;;78     
;;;79     static unsigned char wait_while_busy (void)
0000aa  b510              PUSH     {r4,lr}
;;;80     {
;;;81       unsigned char status;
;;;82     
;;;83       do  {
0000ac  bf00              NOP      
                  |L1.174|
;;;84         status = lcd_read_status();
0000ae  f7fffffe          BL       lcd_read_status
;;;85       }  while (status & 0x80);             /* Wait for busy flag                 */
0000b2  2180              MOVS     r1,#0x80
0000b4  4208              TST      r0,r1
0000b6  d1fa              BNE      |L1.174|
;;;86     
;;;87       return (status);
;;;88     }
0000b8  bd10              POP      {r4,pc}
;;;89     
                          ENDP

                  lcd_write_4bit PROC
;;;96     
;;;97     void lcd_write_4bit (unsigned char c)
0000ba  b510              PUSH     {r4,lr}
;;;98     {
0000bc  4604              MOV      r4,r0
;;;99       LCD_RW(0)
0000be  488d              LDR      r0,|L1.756|
0000c0  38c0              SUBS     r0,r0,#0xc0
0000c2  6800              LDR      r0,[r0,#0]
0000c4  2101              MOVS     r1,#1
0000c6  0349              LSLS     r1,r1,#13
0000c8  4388              BICS     r0,r0,r1
0000ca  498a              LDR      r1,|L1.756|
0000cc  39c0              SUBS     r1,r1,#0xc0
0000ce  6008              STR      r0,[r1,#0]
;;;100      LCD_E(1)
0000d0  4888              LDR      r0,|L1.756|
0000d2  6800              LDR      r0,[r0,#0]
0000d4  2110              MOVS     r1,#0x10
0000d6  4388              BICS     r0,r0,r1
0000d8  3010              ADDS     r0,r0,#0x10
0000da  4986              LDR      r1,|L1.756|
0000dc  6008              STR      r0,[r1,#0]
;;;101      LCD_DATA_OUT(c&0x0F)
0000de  4608              MOV      r0,r1
0000e0  6800              LDR      r0,[r0,#0]
0000e2  0900              LSRS     r0,r0,#4
0000e4  0100              LSLS     r0,r0,#4
0000e6  0721              LSLS     r1,r4,#28
0000e8  0f09              LSRS     r1,r1,#28
0000ea  4308              ORRS     r0,r0,r1
0000ec  4981              LDR      r1,|L1.756|
0000ee  6008              STR      r0,[r1,#0]
;;;102      delay(10);
0000f0  200a              MOVS     r0,#0xa
0000f2  f7fffffe          BL       delay
;;;103      LCD_E(0)
0000f6  487f              LDR      r0,|L1.756|
0000f8  6800              LDR      r0,[r0,#0]
0000fa  2110              MOVS     r1,#0x10
0000fc  4388              BICS     r0,r0,r1
0000fe  497d              LDR      r1,|L1.756|
000100  6008              STR      r0,[r1,#0]
;;;104      delay(10);
000102  200a              MOVS     r0,#0xa
000104  f7fffffe          BL       delay
;;;105    }
000108  bd10              POP      {r4,pc}
;;;106    
                          ENDP

                  lcd_write_cmd PROC
;;;113    
;;;114    void lcd_write_cmd (unsigned char c)
00010a  b510              PUSH     {r4,lr}
;;;115    {
00010c  4604              MOV      r4,r0
;;;116      wait_while_busy();
00010e  f7fffffe          BL       wait_while_busy
;;;117    
;;;118      LCD_RS(0)
000112  4878              LDR      r0,|L1.756|
000114  6800              LDR      r0,[r0,#0]
000116  2120              MOVS     r1,#0x20
000118  4388              BICS     r0,r0,r1
00011a  4976              LDR      r1,|L1.756|
00011c  6008              STR      r0,[r1,#0]
;;;119      lcd_write_4bit (c>>4);
00011e  1120              ASRS     r0,r4,#4
000120  f7fffffe          BL       lcd_write_4bit
;;;120      lcd_write_4bit (c);
000124  4620              MOV      r0,r4
000126  f7fffffe          BL       lcd_write_4bit
;;;121    }
00012a  bd10              POP      {r4,pc}
;;;122    
                          ENDP

                  lcd_write_data PROC
;;;129    
;;;130    static void lcd_write_data (unsigned char c)
00012c  b510              PUSH     {r4,lr}
;;;131    {
00012e  4604              MOV      r4,r0
;;;132      wait_while_busy();
000130  f7fffffe          BL       wait_while_busy
;;;133    
;;;134      LCD_RS(1)
000134  486f              LDR      r0,|L1.756|
000136  6800              LDR      r0,[r0,#0]
000138  2120              MOVS     r1,#0x20
00013a  4388              BICS     r0,r0,r1
00013c  3020              ADDS     r0,r0,#0x20
00013e  496d              LDR      r1,|L1.756|
000140  6008              STR      r0,[r1,#0]
;;;135      lcd_write_4bit (c>>4);
000142  1120              ASRS     r0,r4,#4
000144  f7fffffe          BL       lcd_write_4bit
;;;136      lcd_write_4bit (c);
000148  4620              MOV      r0,r4
00014a  f7fffffe          BL       lcd_write_4bit
;;;137    }
00014e  bd10              POP      {r4,pc}
;;;138    
                          ENDP

                  lcd_putchar PROC
;;;145    
;;;146    void lcd_putchar (char c)
000150  b510              PUSH     {r4,lr}
;;;147    { 
000152  4604              MOV      r4,r0
;;;148      lcd_write_data (c);
000154  4620              MOV      r0,r4
000156  f7fffffe          BL       lcd_write_data
;;;149    }
00015a  bd10              POP      {r4,pc}
;;;150    
                          ENDP

                  Init_LCD PROC
;;;157    
;;;158    void Init_LCD (void)
00015c  b570              PUSH     {r4-r6,lr}
;;;159    { 
;;;160      int i;
;;;161      char const *p;
;;;162    
;;;163      LCD_CLOCK_EN                          /* Enable clock for peripheral        */
00015e  4866              LDR      r0,|L1.760|
000160  6b80              LDR      r0,[r0,#0x38]
000162  210d              MOVS     r1,#0xd
000164  0249              LSLS     r1,r1,#9
000166  4308              ORRS     r0,r0,r1
000168  4963              LDR      r1,|L1.760|
00016a  6388              STR      r0,[r1,#0x38]
;;;164    
;;;165    	/* Set Pin Mux to GPIO */
;;;166    	PIN_DATA_PORT->PCR[PIN_DATA_SHIFT] = PORT_PCR_MUX(1);
00016c  1588              ASRS     r0,r1,#22
00016e  4963              LDR      r1,|L1.764|
000170  6008              STR      r0,[r1,#0]
;;;167    	PIN_DATA_PORT->PCR[PIN_DATA_SHIFT+1] = PORT_PCR_MUX(1);
000172  6048              STR      r0,[r1,#4]
;;;168    	PIN_DATA_PORT->PCR[PIN_DATA_SHIFT+2] = PORT_PCR_MUX(1);
000174  6088              STR      r0,[r1,#8]
;;;169    	PIN_DATA_PORT->PCR[PIN_DATA_SHIFT+3] = PORT_PCR_MUX(1);
000176  60c8              STR      r0,[r1,#0xc]
;;;170    	PIN_E_PORT->PCR[PIN_E_SHIFT] = PORT_PCR_MUX(1);
000178  6108              STR      r0,[r1,#0x10]
;;;171    	PIN_RW_PORT->PCR[PIN_RW_SHIFT] = PORT_PCR_MUX(1);
00017a  4961              LDR      r1,|L1.768|
00017c  6348              STR      r0,[r1,#0x34]
;;;172    	PIN_RS_PORT->PCR[PIN_RS_SHIFT] = PORT_PCR_MUX(1);
00017e  495f              LDR      r1,|L1.764|
000180  6148              STR      r0,[r1,#0x14]
;;;173    	
;;;174      /* Set all pins for LCD as outputs                                          */
;;;175      LCD_ALL_DIR_OUT
000182  485c              LDR      r0,|L1.756|
000184  6940              LDR      r0,[r0,#0x14]
000186  210f              MOVS     r1,#0xf
000188  4308              ORRS     r0,r0,r1
00018a  495a              LDR      r1,|L1.756|
00018c  6148              STR      r0,[r1,#0x14]
00018e  4608              MOV      r0,r1
000190  6940              LDR      r0,[r0,#0x14]
000192  2110              MOVS     r1,#0x10
000194  4308              ORRS     r0,r0,r1
000196  4957              LDR      r1,|L1.756|
000198  6148              STR      r0,[r1,#0x14]
00019a  4856              LDR      r0,|L1.756|
00019c  38c0              SUBS     r0,r0,#0xc0
00019e  6940              LDR      r0,[r0,#0x14]
0001a0  2101              MOVS     r1,#1
0001a2  0349              LSLS     r1,r1,#13
0001a4  4308              ORRS     r0,r0,r1
0001a6  4953              LDR      r1,|L1.756|
0001a8  39c0              SUBS     r1,r1,#0xc0
0001aa  6148              STR      r0,[r1,#0x14]
0001ac  4851              LDR      r0,|L1.756|
0001ae  6940              LDR      r0,[r0,#0x14]
0001b0  2120              MOVS     r1,#0x20
0001b2  4308              ORRS     r0,r0,r1
0001b4  494f              LDR      r1,|L1.756|
0001b6  6148              STR      r0,[r1,#0x14]
;;;176    
;;;177      delay (15000);
0001b8  4852              LDR      r0,|L1.772|
0001ba  f7fffffe          BL       delay
;;;178      LCD_RS(0)
0001be  484d              LDR      r0,|L1.756|
0001c0  6800              LDR      r0,[r0,#0]
0001c2  2120              MOVS     r1,#0x20
0001c4  4388              BICS     r0,r0,r1
0001c6  494b              LDR      r1,|L1.756|
0001c8  6008              STR      r0,[r1,#0]
;;;179      lcd_write_4bit (0x3);                 /* Select 4-bit interface             */
0001ca  2003              MOVS     r0,#3
0001cc  f7fffffe          BL       lcd_write_4bit
;;;180      delay (4100);
0001d0  484d              LDR      r0,|L1.776|
0001d2  f7fffffe          BL       delay
;;;181      lcd_write_4bit (0x3);
0001d6  2003              MOVS     r0,#3
0001d8  f7fffffe          BL       lcd_write_4bit
;;;182      delay (100);
0001dc  2064              MOVS     r0,#0x64
0001de  f7fffffe          BL       delay
;;;183      lcd_write_4bit (0x3);
0001e2  2003              MOVS     r0,#3
0001e4  f7fffffe          BL       lcd_write_4bit
;;;184      lcd_write_4bit (0x2);
0001e8  2002              MOVS     r0,#2
0001ea  f7fffffe          BL       lcd_write_4bit
;;;185    
;;;186      lcd_write_cmd (0x28);                 /* 2 lines, 5x8 character matrix      */
0001ee  2028              MOVS     r0,#0x28
0001f0  f7fffffe          BL       lcd_write_cmd
;;;187      lcd_write_cmd (0x0C);                 /* Display ctrl:Disp=ON,Curs/Blnk=OFF */
0001f4  200c              MOVS     r0,#0xc
0001f6  f7fffffe          BL       lcd_write_cmd
;;;188      lcd_write_cmd (0x06);                 /* Entry mode: Move right, no shift   */
0001fa  2006              MOVS     r0,#6
0001fc  f7fffffe          BL       lcd_write_cmd
;;;189    
;;;190    
;;;191      /* Load user-specific characters into CGRAM                                 */
;;;192    #if LCD_USER_FONT_ENABLE 
;;;193    	lcd_write_cmd(0x40);                  /* Set CGRAM address counter to 0     */
000200  2040              MOVS     r0,#0x40
000202  f7fffffe          BL       lcd_write_cmd
;;;194      p = &UserFont[0][0];
000206  4d41              LDR      r5,|L1.780|
;;;195      for (i = 0; i < sizeof(UserFont); i++, p++)
000208  2400              MOVS     r4,#0
00020a  e004              B        |L1.534|
                  |L1.524|
;;;196        lcd_putchar (*p);
00020c  7828              LDRB     r0,[r5,#0]
00020e  f7fffffe          BL       lcd_putchar
000212  1c64              ADDS     r4,r4,#1              ;195
000214  1c6d              ADDS     r5,r5,#1              ;195
                  |L1.534|
000216  2c40              CMP      r4,#0x40              ;195
000218  d3f8              BCC      |L1.524|
;;;197    #endif 
;;;198    
;;;199      lcd_write_cmd(0x80);                  /* Set DDRAM address counter to 0     */
00021a  2080              MOVS     r0,#0x80
00021c  f7fffffe          BL       lcd_write_cmd
;;;200    }
000220  bd70              POP      {r4-r6,pc}
;;;201    
                          ENDP

                  Set_Cursor PROC
;;;210    
;;;211    void Set_Cursor (int column, int line)
000222  b570              PUSH     {r4-r6,lr}
;;;212    {
000224  4604              MOV      r4,r0
000226  460d              MOV      r5,r1
;;;213      unsigned char address;
;;;214    
;;;215      address = (line * 0x40) + column;
000228  01a8              LSLS     r0,r5,#6
00022a  1900              ADDS     r0,r0,r4
00022c  b2c6              UXTB     r6,r0
;;;216      address = 0x80 + (address & 0x7F);
00022e  0670              LSLS     r0,r6,#25
000230  0e40              LSRS     r0,r0,#25
000232  3080              ADDS     r0,r0,#0x80
000234  b2c6              UXTB     r6,r0
;;;217      lcd_write_cmd(address);               /* Set DDRAM address counter to 0     */
000236  4630              MOV      r0,r6
000238  f7fffffe          BL       lcd_write_cmd
;;;218    }
00023c  bd70              POP      {r4-r6,pc}
;;;219    
                          ENDP

                  Clear_LCD PROC
;;;225    
;;;226    void Clear_LCD (void)
00023e  b510              PUSH     {r4,lr}
;;;227    {
;;;228      lcd_write_cmd(0x01);                  /* Display clear                      */
000240  2001              MOVS     r0,#1
000242  f7fffffe          BL       lcd_write_cmd
;;;229      Set_Cursor (0, 0);
000246  2100              MOVS     r1,#0
000248  4608              MOV      r0,r1
00024a  f7fffffe          BL       Set_Cursor
;;;230    }
00024e  bd10              POP      {r4,pc}
;;;231    
                          ENDP

                  Print_LCD PROC
;;;238    
;;;239    void Print_LCD (char *string)
000250  b510              PUSH     {r4,lr}
;;;240    {
000252  4604              MOV      r4,r0
;;;241      while (*string)  {
000254  e003              B        |L1.606|
                  |L1.598|
;;;242        lcd_putchar (*string++);
000256  7820              LDRB     r0,[r4,#0]
000258  1c64              ADDS     r4,r4,#1
00025a  f7fffffe          BL       lcd_putchar
                  |L1.606|
00025e  7820              LDRB     r0,[r4,#0]            ;241
000260  2800              CMP      r0,#0                 ;241
000262  d1f8              BNE      |L1.598|
;;;243      }
;;;244    }
000264  bd10              POP      {r4,pc}
;;;245    
                          ENDP

                  Bargraph_LCD PROC
;;;252    *******************************************************************************/
;;;253    void Bargraph_LCD (int value, int size) {
000266  b570              PUSH     {r4-r6,lr}
000268  4604              MOV      r4,r0
00026a  460e              MOV      r6,r1
;;;254       int i;
;;;255    
;;;256       value = value * size / 20;            /* Display matrix 5 x 8 pixels       */
00026c  4621              MOV      r1,r4
00026e  4371              MULS     r1,r6,r1
000270  4608              MOV      r0,r1
000272  2114              MOVS     r1,#0x14
000274  f7fffffe          BL       __aeabi_idivmod
000278  4604              MOV      r4,r0
;;;257       for (i = 0; i < size; i++) {
00027a  2500              MOVS     r5,#0
00027c  e013              B        |L1.678|
                  |L1.638|
;;;258          if (value > 5) {
00027e  2c05              CMP      r4,#5
000280  dd04              BLE      |L1.652|
;;;259             lcd_putchar (0x05);
000282  2005              MOVS     r0,#5
000284  f7fffffe          BL       lcd_putchar
;;;260             value -= 5;
000288  1f64              SUBS     r4,r4,#5
00028a  e00b              B        |L1.676|
                  |L1.652|
;;;261          }
;;;262          else {
;;;263             lcd_putchar (value);
00028c  b2e0              UXTB     r0,r4
00028e  f7fffffe          BL       lcd_putchar
;;;264    				 while (i++ < 16) 
000292  e002              B        |L1.666|
                  |L1.660|
;;;265    						lcd_putchar (0);
000294  2000              MOVS     r0,#0
000296  f7fffffe          BL       lcd_putchar
                  |L1.666|
00029a  4628              MOV      r0,r5                 ;264
00029c  1c6d              ADDS     r5,r5,#1              ;264
00029e  2810              CMP      r0,#0x10              ;264
0002a0  dbf8              BLT      |L1.660|
;;;266             break;
0002a2  e002              B        |L1.682|
                  |L1.676|
0002a4  1c6d              ADDS     r5,r5,#1              ;257
                  |L1.678|
0002a6  42b5              CMP      r5,r6                 ;257
0002a8  dbe9              BLT      |L1.638|
                  |L1.682|
0002aa  bf00              NOP      
;;;267          }
;;;268       }
;;;269    }
0002ac  bd70              POP      {r4-r6,pc}
;;;270    
                          ENDP

                  BargraphXY_LCD PROC
;;;279    
;;;280    void BargraphXY_LCD (int pos_x, int pos_y, int value) {
0002ae  b5f8              PUSH     {r3-r7,lr}
0002b0  4606              MOV      r6,r0
0002b2  460f              MOV      r7,r1
0002b4  4614              MOV      r4,r2
;;;281      int i;
;;;282    
;;;283      Set_Cursor (pos_x, pos_y);
0002b6  4639              MOV      r1,r7
0002b8  4630              MOV      r0,r6
0002ba  f7fffffe          BL       Set_Cursor
;;;284      for (i = 0; i < 16; i++)  {
0002be  2500              MOVS     r5,#0
0002c0  e013              B        |L1.746|
                  |L1.706|
;;;285        if (value > 5) {
0002c2  2c05              CMP      r4,#5
0002c4  dd04              BLE      |L1.720|
;;;286          lcd_putchar (0x05);
0002c6  2005              MOVS     r0,#5
0002c8  f7fffffe          BL       lcd_putchar
;;;287          value -= 5;
0002cc  1f64              SUBS     r4,r4,#5
0002ce  e00b              B        |L1.744|
                  |L1.720|
;;;288        } else {
;;;289          lcd_putchar (value);
0002d0  b2e0              UXTB     r0,r4
0002d2  f7fffffe          BL       lcd_putchar
;;;290          while (i++ < 16) 
0002d6  e002              B        |L1.734|
                  |L1.728|
;;;291    				lcd_putchar (0);
0002d8  2000              MOVS     r0,#0
0002da  f7fffffe          BL       lcd_putchar
                  |L1.734|
0002de  4628              MOV      r0,r5                 ;290
0002e0  1c6d              ADDS     r5,r5,#1              ;290
0002e2  2810              CMP      r0,#0x10              ;290
0002e4  dbf8              BLT      |L1.728|
;;;292    			break;
0002e6  e002              B        |L1.750|
                  |L1.744|
0002e8  1c6d              ADDS     r5,r5,#1              ;284
                  |L1.746|
0002ea  2d10              CMP      r5,#0x10              ;284
0002ec  dbe9              BLT      |L1.706|
                  |L1.750|
0002ee  bf00              NOP      
;;;293        }
;;;294      }
;;;295    }
0002f0  bdf8              POP      {r3-r7,pc}
;;;296    
                          ENDP

0002f2  0000              DCW      0x0000
                  |L1.756|
                          DCD      0x400ff0c0
                  |L1.760|
                          DCD      0x40048000
                  |L1.764|
                          DCD      0x4004c000
                  |L1.768|
                          DCD      0x40049000
                  |L1.772|
                          DCD      0x00003a98
                  |L1.776|
                          DCD      0x00001004
                  |L1.780|
                          DCD      UserFont

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  UserFont
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  10101010          DCB      0x10,0x10,0x10,0x10
00000c  10101010          DCB      0x10,0x10,0x10,0x10
000010  18181818          DCB      0x18,0x18,0x18,0x18
000014  18181818          DCB      0x18,0x18,0x18,0x18
000018  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
00001c  1c1c1c1c          DCB      0x1c,0x1c,0x1c,0x1c
000020  1e1e1e1e          DCB      0x1e,0x1e,0x1e,0x1e
000024  1e1e1e1e          DCB      0x1e,0x1e,0x1e,0x1e
000028  1f1f1f1f          DCB      0x1f,0x1f,0x1f,0x1f
00002c  1f1f1f1f          DCB      0x1f,0x1f,0x1f,0x1f
000030  00000000          DCB      0x00,0x00,0x00,0x00
000034  00000000          DCB      0x00,0x00,0x00,0x00
000038  00000000          DCB      0x00,0x00,0x00,0x00
00003c  00000000          DCB      0x00,0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "src\\LCD_4bit.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_LCD_4bit_c_UserFont____REV16|
#line 115 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_LCD_4bit_c_UserFont____REV16| PROC
#line 116

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___10_LCD_4bit_c_UserFont____REVSH|
#line 130
|__asm___10_LCD_4bit_c_UserFont____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
